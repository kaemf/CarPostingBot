import { OpenAI } from 'openai';
import axios from "axios";
import FormData from "form-data";
import fs, { createWriteStream } from 'fs';
import dotenv from "dotenv";
import path from 'path';

dotenv.config();

const TELEGRAM_BOT_TOKEN = process.env.TOKEN;

const client = new OpenAI({ apiKey: process.env.GPT });

function promptJSON(question?: string){
  return `–¢—ã ‚Äî API, –∫–æ—Ç–æ—Ä–∞—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∞–≤—Ç–æ–º–æ–±–∏–ª—è (–≤–Ω–µ—à–Ω–∏–π –≤–∏–¥, —Å–∞–ª–æ–Ω, —Å–ø–∏–¥–æ–º–µ—Ç—Ä –∏ —Ç.–¥.) –∏ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å—Ç—Ä–æ–≥–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π JSON.

  –¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî –∏–∑–≤–ª–µ—á—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–∞—à–∏–Ω–µ –ø–æ —Å–ª–µ–¥—É—é—â–∏–º –ø—Ä–∞–≤–∏–ª–∞–º:

  ‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ JSON:
  {
    "Valid": {
      ...
    },
    "Unknown": [
      ...
    ]
  }

  –ü—Ä–∏–º–µ—Ä —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –≤–∏–¥–∞ –≤–≤–æ–¥–∞:
  FOR SALE:  2026 CADILLAC VISTIQ SPORT
  ( Electric) 

  ODOMETER: 8 km 

  PRICE: $97300 plus taxes

  –ò –ø—Ä–∏–º–µ—Ä –æ—Ç–≤–µ—Ç–∞:
  {
    "Valid": {
      Year: "2026",
      Make: "Cadillac",
      Model: "Vistiq",
      Trim: "Sport",
      "Body type": "SUV",
      Transmission: "Automatic",
      "Fuel type": "Electric",
      Mileage: "8",
      Price: "97300"
    },
    "Unknown": []
  }

  ‚ùóÔ∏è–î–æ–ø—É—Å—Ç–∏–º—ã —Ç–æ–ª—å–∫–æ –¥–≤–∞ –∫–æ—Ä–Ω–µ–≤—ã—Ö –∫–ª—é—á–∞: "Valid" –∏ "Unknown".  
  –ù–∏–∫–∞–∫–∏—Ö –¥—Ä—É–≥–∏—Ö —Å–ª–æ–≤, –ø–æ—è—Å–Ω–µ–Ω–∏–π –∏–ª–∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è. –û—Ç–≤–µ—Ç ‚Äî —Å—Ç—Ä–æ–≥–æ JSON.

  üîé –ö–∞–∫ –∑–∞–ø–æ–ª–Ω—è—Ç—å –ø–æ–ª—è:

  1. –ï—Å–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ —É–∫–∞–∑–∞–Ω–æ –ø—Ä—è–º–æ ‚Äî –¥–æ–±–∞–≤—å –µ–≥–æ –≤ "Valid" (–ò—Å–ø–æ–ª—å–∑—É–π —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫ —Ç–∞–∫—Å–æ–Ω–æ–º–∏–π –¥–ª—è –ª—É—á—à–µ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞, –ø–æ name).
  2. –ï—Å–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, –Ω–æ –º–æ–∂–Ω–æ **–ª–æ–≥–∏—á–µ—Å–∫–∏ –≤—ã–≤–µ—Å—Ç–∏ –ø–æ –¥—Ä—É–≥–∏–º –ø–æ–ª—è–º** ‚Äî —Ç–æ–∂–µ –¥–æ–±–∞–≤—å –µ–≥–æ –≤ "Valid".

    –ü—Ä–∏–º–µ—Ä—ã:
    1. "Model": "Camry" ‚Üí –∑–Ω–∞—á–∏—Ç "Make": "Toyota"
    2. "Model": "SL43 AMG", "Year": 2025 ‚Üí "Fuel type": "Gasoline"
    3. "Mileage": 10, "Year": —Ç–µ–∫—É—â–∏–π ‚Üí –ø–æ—á—Ç–∏ –≤—Å–µ–≥–¥–∞ "Transmission": "Automatic"
    4. "Model": "SL43 AMG", "Year": 2025 ‚Üí "Trim": "AMG" (–ª–æ–≥–∏—á–µ—Å–∫–æ–µ –ø—Ä–µ–¥–ø–æ–ª–æ–∂–µ–Ω–∏–µ –ø–æ –º–æ–¥–µ–ª–∏)
    5. "Model": "Toyota Prius", "Year": 2025 ‚Üí "Trim": "Base" (–ª–æ–≥–∏—á–µ—Å–∫–æ–µ –ø—Ä–µ–¥–ø–æ–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è —Å—Ä–µ–¥–Ω–µ–≥–æ –∫–ª–∞—Å—Å–∞)
    6. "Model": "Ford Mustang", "Trim": –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç ‚Üí "Trim": "GT" (–ø–æ—Å–∫–æ–ª—å–∫—É —ç—Ç–æ —Å–ø–æ—Ä—Ç–∏–≤–Ω–∞—è –º–æ–¥–µ–ª—å)


  3. –ï—Å–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ:
    - –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç,
    - –≤—ã–≥–ª—è–¥–∏—Ç –∫–∞–∫ –º—É—Å–æ—Ä (–Ω–∞–ø—Ä–∏–º–µ—Ä, "1", "-", "test", "n/a", "Unknown", —Å–ª—É—á–∞–π–Ω—ã–π –Ω–∞–±–æ—Ä —Å–∏–º–≤–æ–ª–æ–≤) ‚Äî

    —Ç–æ **–Ω–µ –≤–∫–ª—é—á–∞–π –≤ Valid**, –∞ **–¥–æ–±–∞–≤—å –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ–ª—è –≤ –º–∞—Å—Å–∏–≤ "Unknown"**.

  üö´ –í "Valid" –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –∑–Ω–∞—á–µ–Ω–∏–π –≤—Ä–æ–¥–µ:
  - "Fuel type": "Unknown"
  - "Trim": "1"
  - "Exterior Colour": "-"
  - "Fuel type": "–ù–µ—Ç"

  üìå –ï—Å–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ –º–æ–∂–Ω–æ –ª–æ–≥–∏—á–µ—Å–∫–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å ‚Äî –∏—Å–ø–æ–ª—å–∑—É–π —ç—Ç–æ. –ü—Ä–∏–º–µ—Ä—ã:
  - –ï—Å–ª–∏ "Model": "Camry" ‚Üí "Make": "Toyota"
  - –ï—Å–ª–∏ "Body type" —è–≤–Ω–æ –≤–∏–¥–µ–Ω –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏ ‚Üí –∏—Å–ø–æ–ª—å–∑—É–π –µ–≥–æ

  üìã –ü–æ–ª—è, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å:
  - Body type (–±–µ—Ä–∏ –¥–∞–Ω–Ω—ã–µ —Å —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∞, –ø–æ–ª–µ name)
  - Year
  - Mileage (–ù–µ —É–≥–∞–¥—ã–≤–∞–π —ç—Ç–æ –∑–Ω–∞—á–µ–Ω–∏–µ, –µ—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç - –∫–∏–¥–∞–π –≤ "Unknown", –Ω–æ –≤ —Ç–∞–∫–æ–º —Å–ª—É—á–∞–µ –µ–≥–æ –Ω–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å "Valid")
  - Price (–ù–µ —É–≥–∞–¥—ã–≤–∞–π —ç—Ç–æ –∑–Ω–∞—á–µ–Ω–∏–µ, –µ—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç - –∫–∏–¥–∞–π –≤ "Unknown", –Ω–æ –≤ —Ç–∞–∫–æ–º —Å–ª—É—á–∞–µ –µ–≥–æ –Ω–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å "Valid")
  - Make (–±–µ—Ä–∏ –¥–∞–Ω–Ω—ã–µ —Å —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∞, –ø–æ–ª–µ name)
  - Model
  - Trim
  - Fuel type (–±–µ—Ä–∏ –¥–∞–Ω–Ω—ã–µ —Å —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∞, –ø–æ–ª–µ name)
  - Transmission (–û–Ω–∞ –≤—Å–µ–≥–¥–∞ Automatic)

  –ï—Å–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ–ª—è –Ω–µ –≤—Ö–æ–¥–∏—Ç –≤ —ç—Ç–∏ —Å–ø–∏—Å–∫–∏ (–¥–ª—è Fuel type –∏–ª–∏ Transmission) ‚Äî –Ω–µ –¥–æ–±–∞–≤–ª—è–π –µ–≥–æ –≤ "Valid", –∞ –ø–µ—Ä–µ–º–µ—Å—Ç–∏ –ø–æ–ª–µ –≤ "Unknown".

  üì¶ –í–æ–∑–≤—Ä–∞—â–∞–π —Ç–æ–ª—å–∫–æ –≤–∞–ª–∏–¥–Ω—ã–π JSON. –ù–∏–∫–∞–∫–∏—Ö "–ü–æ—Å—Ç–∏—Ç—å?", "–ì–æ—Ç–æ–≤–æ", –ø–æ—è—Å–Ω–µ–Ω–∏–π, —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è, –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤.

  –í–æ–∑–≤—Ä–∞—â–∞–π –æ—Ç–≤–µ—Ç —Å—Ç—Ä–æ–≥–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON.

  
  –¢–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${question ?? ''}
  
  ‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì

–°–ø—Ä–∞–≤–æ—á–Ω–∏–∫ —Ç–∞–∫—Å–æ–Ω–æ–º–∏–π (—Ç–æ–ª—å–∫–æ term_id, name, slug)

–ú–∞—Ä–∫–∏:
{"term_id":"4","name":"Acura","slug":"acura"},
{"term_id":"5","name":"Alfa Romeo","slug":"alfa-romeo"},
{"term_id":"7","name":"Aston Martin","slug":"aston-martin"},
{"term_id":"8","name":"Audi","slug":"audi"},
{"term_id":"10","name":"Bentley","slug":"bentley"},
{"term_id":"11","name":"BMW","slug":"bmw"},
{"term_id":"12","name":"Buick","slug":"buick"},
{"term_id":"13","name":"Cadillac","slug":"cadillac"},
{"term_id":"14","name":"Chevrolet","slug":"chevrolet"},
{"term_id":"15","name":"Chrysler","slug":"chrysler"},
{"term_id":"16","name":"Dodge","slug":"dodge"},
{"term_id":"17","name":"Ferrari","slug":"ferrari"},
{"term_id":"18","name":"FIAT","slug":"fiat"},
{"term_id":"20","name":"Ford","slug":"ford"},
{"term_id":"21","name":"Genesis","slug":"genesis"},
{"term_id":"22","name":"GMC","slug":"gmc"},
{"term_id":"23","name":"Honda","slug":"honda"},
{"term_id":"24","name":"Hummer","slug":"hummer"},
{"term_id":"25","name":"Hyundai","slug":"hyundai"},
{"term_id":"27","name":"INFINITI","slug":"infiniti"},
{"term_id":"28","name":"Jaguar","slug":"jaguar"},
{"term_id":"29","name":"Jeep","slug":"jeep"},
{"term_id":"31","name":"Kia","slug":"kia"},
{"term_id":"32","name":"Lamborghini","slug":"lamborghini"},
{"term_id":"33","name":"Land Rover","slug":"land-rover"},
{"term_id":"34","name":"Lexus","slug":"lexus"},
{"term_id":"35","name":"Lincoln","slug":"lincoln"},
{"term_id":"36","name":"Lotus","slug":"lotus"},
{"term_id":"38","name":"Maserati","slug":"maserati"},
{"term_id":"39","name":"Mazda","slug":"mazda"},
{"term_id":"40","name":"McLaren","slug":"mclaren"},
{"term_id":"41","name":"Mercedes-Benz","slug":"mercedes-benz"},
{"term_id":"43","name":"MINI","slug":"mini"},
{"term_id":"44","name":"Mitsubishi","slug":"mitsubishi"},
{"term_id":"45","name":"Nissan","slug":"nissan"},
{"term_id":"49","name":"Pontiac","slug":"pontiac"},
{"term_id":"50","name":"Porsche","slug":"porsche"},
{"term_id":"51","name":"RAM","slug":"ram"},
{"term_id":"53","name":"Rolls-Royce","slug":"rolls-royce"},
{"term_id":"54","name":"Saab","slug":"saab"},
{"term_id":"58","name":"Smart","slug":"smart"},
{"term_id":"59","name":"Subaru","slug":"subaru"},
{"term_id":"60","name":"Suzuki","slug":"suzuki"},
{"term_id":"61","name":"Tesla","slug":"tesla"},
{"term_id":"62","name":"Toyota","slug":"toyota"},
{"term_id":"64","name":"Volkswagen","slug":"volkswagen"},
{"term_id":"65","name":"Volvo","slug":"volvo"}

–ö—É–∑–æ–≤–∞:
{"term_id":"66","name":"SUV","slug":"suv"},
{"term_id":"67","name":"Truck","slug":"truck"},
{"term_id":"68","name":"Sedan","slug":"sedan"},
{"term_id":"69","name":"Coupe","slug":"coupe"},
{"term_id":"70","name":"Minivan","slug":"minivan"},
{"term_id":"72","name":"Hatchback","slug":"hatchback"},
{"term_id":"73","name":"Convertible","slug":"convertible"},
{"term_id":"74","name":"Wagon","slug":"wagon"}

–¢–∏–ø —Ç–æ–ø–ª–∏–≤–∞:
{"term_id":"75","name":"Diesel","slug":"diesel"},
{"term_id":"76","name":"Gasoline","slug":"gasoline"},
{"term_id":"77","name":"Electric","slug":"electric"},
{"term_id":"78","name":"Hybrid","slug":"hybrid"}

–ö–æ—Ä–æ–±–∫–∞ –ø–µ—Ä–µ–¥–∞—á:
{"term_id":"91","name":"Automatic","slug":"automatic"},
{"term_id":"92","name":"Manual","slug":"manual"}

‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì
`
}

// function parseHtmlToText(html: string): string {
//   let text = html;

//   text = text.replace(/<\/?[^>]+(>|$)/g, "");
//   text = text.replace(/<br\s*\/?>/g, "\n");
//   text = text.replace(/<b>|<strong>/g, "**");
//   text = text.replace(/<\/b>|<\/strong>/g, "**");
//   text = text.replace(/<i>|<em>/g, "*");
//   text = text.replace(/<\/i>|<\/em>/g, "*");
//   text = text.replace(/<a\s+href="([^"]+)">([^<]+)<\/a>/g, "[$2]($1)");
//   text = text.replace(/<ul>|<ol>/g, "");
//   text = text.replace(/<\/ul>|<\/ol>/g, "");
//   text = text.replace(/<li>/g, "- ");
  
//   return text;
// }

function removeJsonBackticks(input: string): string {
  return input
    .trim()
    .replace(/^```json\s*/i, '')
    .replace(/```$/i, '')
    .trim();
}

export async function downloadTelegramFile(fileId: string, saveDir = "temp"): Promise<string> {
    const fileInfo = await axios.get(`https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/getFile?file_id=${fileId}`);
    const filePath = fileInfo.data.result.file_path;

    const downloadUrl = `https://api.telegram.org/file/bot${TELEGRAM_BOT_TOKEN}/${filePath}`;

    const fileName = path.basename(filePath);
    const localFilePath = path.join(saveDir, fileName);

    fs.mkdirSync(saveDir, { recursive: true });

    const response = await axios.get(downloadUrl, { responseType: "stream" });
    const writer = createWriteStream(localFilePath);

    await new Promise((resolve, reject) => {
        response.data.pipe(writer);
        writer.on("finish", resolve);
        writer.on("error", reject);
    });

    return localFilePath;
}


export async function transcribeAudio(audioId: string): Promise<string | null> {
    try {
        const audioUrl = await downloadTelegramFile(audioId),
            audio = fs.createReadStream(audioUrl),

        formData = new FormData();
        formData.append("file", audio, "audio.ogg");
        formData.append("model", "whisper-1");

        const response = await axios.post("https://api.openai.com/v1/audio/transcriptions", formData, {
            headers: {
            Authorization: `Bearer ${process.env.GPT}`,
            ...formData.getHeaders(),
            },
        });

        fs.unlink(audioUrl, (err) => {
            if (err) {
                console.error(`Error deleting file: ${err}`);
            } else {
                console.log(`File ${audioUrl} deleted.`);
            }
        });

        return response.data.text;
  } catch (error: any) {
    console.error("Error while transcribing audio:", error);
    return null;
  }
}

export async function analyzeImages(fileIds: string[], question?: string): Promise<string | null> {
    try {
      const filePaths = await Promise.all(fileIds.filter(item => item !== "").map(item =>downloadTelegramFile(item)));

      if (filePaths.length > 20) {
        throw new Error("–ú–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –º–∞–∫—Å–∏–º—É–º 20 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∑–∞ —Ä–∞–∑.");
      }
  
      const imageContents = filePaths.map((path) => {
        const base64 = fs.readFileSync(path, { encoding: "base64" });
        const mimeType = path.endsWith(".png") ? "image/png" : "image/jpeg";
        return {
          type: "image_url",
          image_url: {
            url: `data:${mimeType};base64,${base64}`,
          },
        };
      });
  
      const messages = [
        {
          role: "user",
          content: [
            { type: "text", text: promptJSON(question) },
            ...imageContents,
          ],
        },
      ];
  
      const response = await axios.post(
        "https://api.openai.com/v1/chat/completions",
        {
          model: "gpt-4o-mini",
          messages,
          max_tokens: 1500,
        },
        {
          headers: {
            Authorization: `Bearer ${process.env.GPT}`,
            "Content-Type": "application/json",
          },
        }
      );

      filePaths.forEach((path) => {
        fs.unlink(path, (err) => {
          if (err) {
            console.error(`Error deleting file: ${err}`);
          } else {
            console.log(`File ${path} deleted.`);
          }
        });
      });
  
      return response.data.choices[0].message.content ? removeJsonBackticks(response.data.choices[0].message.content) : null;
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π:", error);
      return null;
    }
}

export async function askChatGPT(prompt: string): Promise<string | null> {
    try {
        const response = await client.chat.completions.create({
            model: "gpt-4o-mini",
            messages: [{ role: "user", content: prompt }],
        });

        return response.choices[0]?.message.content || "No response";
    } catch (error: any) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ GPT:", error);
        return null;
    }
}

